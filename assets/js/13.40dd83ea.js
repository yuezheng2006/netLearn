(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{91:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),a("ClientOnly",[a("img-viewer",{attrs:{url:"https://static001.geekbang.org/resource/image/05/e6/05c1710c966ae46cbd41ec1b9ed909e6.jpg"}})],1),t._v(" "),a("p",[t._v("上一节我们讲了基于 XML 的 SOAP 协议，SOAP 的 S 是啥意思来着？是 Simple，但是好像一点儿都不简单啊！")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("对于 SOAP 来讲，比如我创建一个订单，用 POST，在 XML 里面写明动作是 CreateOrder；删除一个订单，还是用 POST，在 XML 里面写明了动作是 DeleteOrder。其实创建订单完全可以使用 POST 动作，然后在 XML 里面放一个订单的信息就可以了，而删除用 DELETE 动作，然后在 XML 里面放一个订单的 ID 就可以了。")]),t._v(" "),a("p",[t._v("于是上面的那个 SOAP 就变成下面这个简单的模样。")]),t._v(" "),t._m(4),a("p",[t._v("而且 XML 的格式也可以改成另外一种简单的文本化的对象表示格式 JSON。")]),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("这篇文章从深层次，更加抽象地论证了一个互联网应用应该有的设计要点，而这些设计要点，成为后来我们能看到的所有高并发应用设计都必须要考虑的问题，再加上 REST API 比较简单直接，所以后来几乎成为互联网应用的标准接口。")]),t._v(" "),a("p",[t._v("因此，和 SOAP 不一样，REST 不是一种严格规定的标准，它其实是一种设计风格。如果按这种风格进行设计，RESTful 接口和 SOAP 接口都能做到，只不过后面的架构是 REST 倡导的，而 SOAP 相对比较关注前面的接口。")]),t._v(" "),a("p",[t._v("而且由于能够通过 WSDL 生成客户端的 Stub，因而 SOAP 常常被用于类似传统的 RPC 方式，也即调用远端和调用本地是一样的。")]),t._v(" "),a("p",[t._v("然而本地调用和远程跨网络调用毕竟不一样，这里的不一样还不仅仅是因为有网络而导致的客户端和服务端的分离，从而带来的网络性能问题。更重要的问题是，客户端和服务端谁来维护状态。所谓的状态就是对某个数据当前处理到什么程度了。")]),t._v(" "),a("p",[t._v("这里举几个例子，例如，我浏览到哪个目录了，我看到第几页了，我要买个东西，需要扣减一下库存，这些都是状态。本地调用其实没有人纠结这个问题，因为数据都在本地，谁处理都一样，而且一边处理了，另一边马上就能看到。")]),t._v(" "),a("p",[t._v("当有了 RPC 之后，我们本来期望对上层透明，就像上一节说的“远在天边，尽在眼前”。于是使用 RPC 的时候，对于状态的问题也没有太多的考虑。")]),t._v(" "),a("p",[t._v("就像 NFS 一样，客户端会告诉服务端，我要进入哪个目录，服务端必须要为某个客户端维护一个状态，就是当前这个客户端浏览到哪个目录了。例如，客户端输入 cd hello，服务端要在某个地方记住，上次浏览到 /root/liuchao 了，因而客户的这次输入，应该给它显示 /root/liuchao/hello 下面的文件列表。而如果有另一个客户端，同样输入 cd hello，服务端也在某个地方记住，上次浏览到 /var/lib，因而要给客户显示的是 /var/lib/hello。")]),t._v(" "),a("p",[t._v("不光 NFS，如果浏览翻页，我们经常要实现函数 next()，在一个列表中取下一页，但是这就需要服务端记住，客户端 A 上次浏览到 20 ～ 30 页了，那它调用 next()，应该显示 30 ～ 40 页，而客户端 B 上次浏览到 100 ～ 110 页了，调用 next() 应该显示 110 ～ 120 页。")]),t._v(" "),a("p",[t._v("上面的例子都是在 RPC 场景下，由服务端来维护状态，很多 SOAP 接口设计的时候，也常常按这种模式。这种模式原来没有问题，是因为客户端和服务端之间的比例没有失衡。因为一般不会同时有太多的客户端同时连上来，所以 NFS 还能把每个客户端的状态都记住。")]),t._v(" "),a("p",[t._v("公司内部使用的 ERP 系统，如果使用 SOAP 的方式实现，并且服务端为每个登录的用户维护浏览到报表那一页的状态，由于一个公司内部的人也不会太多，把 ERP 放在一个强大的物理机上，也能记得过来。")]),t._v(" "),a("p",[t._v("但是互联网场景下，客户端和服务端就彻底失衡了。你可以想象“双十一”，多少人同时来购物，作为服务端，它能记得过来吗？当然不可能，只好多个服务端同时提供服务，大家分担一下。但是这就存在一个问题，服务端怎么把自己记住的客户端状态告诉另一个服务端呢？或者说，你让我给你分担工作，你也要把工作的前因后果给我说清楚啊！")]),t._v(" "),a("p",[t._v("那服务端索性就要想了，既然这么多客户端，那大家就分分工吧。服务端就只记录资源的状态，例如文件的状态，报表的状态，库存的状态，而客户端自己维护自己的状态。比如，你访问到哪个目录了啊，报表的哪一页了啊，等等。")]),t._v(" "),a("p",[t._v("这样对于 API 也有影响，也就是说，当客户端维护了自己的状态，就不能这样调用服务端了。例如客户端说，我想访问当前目录下的 hello 路径。服务端说，我怎么知道你的当前路径。所以客户端要先看看自己当前路径是 /root/liuchao，然后告诉服务端说，我想访问 /root/liuchao/hello 路径。")]),t._v(" "),a("p",[t._v("再比如，客户端说我想访问下一页，服务端说，我怎么知道你当前访问到哪一页了。所以客户端要先看看自己访问到了 100 ～ 110 页，然后告诉服务器说，我想访问 110 ～ 120 页。")]),t._v(" "),a("p",[t._v("这就是服务端的无状态化。这样服务端就可以横向扩展了，一百个人一起服务，不用交接，每个人都能处理。")]),t._v(" "),a("p",[t._v("所谓的无状态，其实是服务端维护资源的状态，客户端维护会话的状态。对于服务端来讲，只有资源的状态改变了，客户端才调用 POST、PUT、DELETE 方法来找我；如果资源的状态没变，只是客户端的状态变了，就不用告诉我了，对于我来说都是统一的 GET。")]),t._v(" "),a("p",[t._v("虽然这只改进了 GET，但是已经带来了很大的进步。因为对于互联网应用，大多数是读多写少的。而且只要服务端的资源状态不变，就给了我们缓存的可能。例如可以将状态缓存到接入层，甚至缓存到 CDN 的边缘节点，这都是资源状态不变的好处。")]),t._v(" "),a("p",[t._v("按照这种思路，对于 API 的设计，就慢慢变成了以资源为核心，而非以过程为核心。也就是说，客户端只要告诉服务端你想让资源状态最终变成什么样就可以了，而不用告诉我过程，不用告诉我动作。")]),t._v(" "),a("p",[t._v("还是文件目录的例子。客户端应该访问哪个绝对路径，而非一个动作，我就要进入某个路径。再如，库存的调用，应该查看当前的库存数目，然后减去购买的数量，得到结果的库存数。这个时候应该设置为目标库存数（但是当前库存数要匹配），而非告知减去多少库存。")]),t._v(" "),t._m(9),t._v(" "),a("p",[t._v("当然按照这种设计模式，无论 RESTful API 还是 SOAP API 都可以将架构实现成无状态的，面向资源的、幂等的、横向扩展的、可缓存的。")]),t._v(" "),a("p",[t._v("但是 SOAP 的 XML 正文中，是可以放任何动作的。例如 XML 里面可以写 < ADD >，< MINUS > 等。这就方便使用 SOAP 的人，将大量的动作放在 API 里面。")]),t._v(" "),a("p",[t._v("RESTful 没这么复杂，也没给客户提供这么多的可能性，正文里的 JSON 基本描述的就是资源的状态，没办法描述动作，而且能够出发的动作只有 CRUD，也即 POST、GET、PUT、DELETE，也就是对于状态的改变。")]),t._v(" "),a("p",[t._v("所以，从接口角度，就让你死了这条心。当然也有很多技巧的方法，在使用 RESTful API 的情况下，依然提供基于动作的有状态请求，这属于反模式了。")]),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("对于 RESTful API 来讲，我们已经解决了传输协议的问题——基于 HTTP，协议约定问题——基于 JSON，最后要解决的是服务发现问题。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("当消费方要调用服务的时候，会从注册中心读出多个服务来，那怎么调用呢？当然是 RESTful 方式了。")]),t._v(" "),t._m(14),t._v(" "),a("p",[t._v("通过这样封装，调用起来也很方便。")]),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("好了，这一节就到这里了，我们来总结一下。")]),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("最后，给你留两个思考题：")]),t._v(" "),t._m(17)],1)},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"第-34-讲-基于-json-的-restful-接口协议：我不关心过程，请给我结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-34-讲-基于-json-的-restful-接口协议：我不关心过程，请给我结果","aria-hidden":"true"}},[this._v("#")]),this._v(" 第 34 讲 | 基于 JSON 的 RESTful 接口协议：我不关心过程，请给我结果")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("2018-08-03 刘超")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("你会发现，对于 SOAP 来讲，无论 XML 中调用的是什么函数，多是通过 HTTP 的 "),a("code",[t._v("POST")]),t._v(" 方法发送的。但是咱们原来学 HTTP 的时候，我们知道 HTTP 除了 "),a("code",[t._v("POST")]),t._v("，还有 "),a("code",[t._v("PUT")]),t._v("、"),a("code",[t._v("DELETE")]),t._v("、"),a("code",[t._v("GET")]),t._v(" 等方法，这些也可以代表一个个动作，而且基本满足增、删、查、改的需求，比如增是 POST，删是 DELETE，查是 GET，改是 PUT。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"传输协议问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输协议问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 传输协议问题")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[t._v("POST /purchaseOrder HTTP/1.1\nHost: www.geektime.com\nContent-Type: application/xml; charset=utf-8\nContent-Length: nnn\n\n"),a("span",{attrs:{class:"token prolog"}},[t._v('<?xml version="1.0"?>')]),t._v("\n "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("order")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n     "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("date")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2018-07-01"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("date")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("className")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" 趣谈网络协议 "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("className")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n       "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Author")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" 刘超 "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("Author")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n       "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("price")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("68"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("price")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("order")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("POST /purchaseOrder HTTP/"),a("span",{attrs:{class:"token number"}},[t._v("1.1")]),t._v("\nHost"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" www.geektime.com\nContent-Type"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" application/json"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset=utf-"),a("span",{attrs:{class:"token number"}},[t._v("8")]),t._v("\nContent-Length"),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" nnn\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{attrs:{class:"token property"}},[t._v('"order"')]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token property"}},[t._v('"date"')]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"2018-07-01"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token property"}},[t._v('"className"')]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('" 趣谈网络协议 "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token property"}},[t._v('"Author"')]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('" 刘超 "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token property"}},[t._v('"price"')]),a("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"68"')]),t._v("\n "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("经常写 Web 应用的应该已经发现，这就是 "),s("strong",[this._v("RESTful")]),this._v(" 格式的 API 的样子。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"协议约定问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议约定问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 协议约定问题")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然而 RESTful 可不仅仅是指 API，而是一种架构风格，全称 "),s("strong",[this._v("Representational State Transfer，表述性状态转移")]),this._v("，来自一篇重要的论文《架构风格与基于网络的软件架构设计》（Architectural Styles and the Design of Network-based Software Architectures）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种 API 的设计需要实现幂等，因为网络不稳定，就会经常出错，因而需要重试，但是一旦重试，就会存在幂等的问题，也就是同一个调用，多次调用的结果应该一样，不能一次支付调用，因为调用三次变成了支付三次。不能进入 cd a，做了三次，就变成了 "),s("code",[this._v("cd a/a/a")]),this._v("。也不能扣减库存，调用了三次，就扣减三次库存。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"服务发现问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务发现问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 服务发现问题")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有个著名的基于 RESTful API 的跨系统调用框架叫 "),s("code",[this._v("Spring Cloud")]),this._v("。在 Spring Cloud 中有一个组件叫 "),s("code",[this._v("Eureka")]),this._v("。传说，阿基米德在洗澡时发现浮力原理，高兴得来不及穿上裤子，跑到街上大喊：“Eureka（我找到了）！”所以 "),s("code",[this._v("Eureka")]),this._v(" 是用来实现注册中心的，负责维护注册的服务列表。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("服务分服务提供方，它向 "),s("code",[this._v("Eureka")]),this._v(" 做服务注册、续约和下线等操作，注册的主要数据包括服务名、机器 IP、端口号、域名等等。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外一方是服务消费方，向 "),s("code",[this._v("Eureka")]),this._v(" 获取服务提供方的注册信息。为了实现负载均衡和容错，服务提供方可以注册多个。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("Spring Cloud 提供一个 RestTemplate 工具，用于将请求对象转换为 JSON，并发起 Rest 调用，RestTemplate 的调用也是分 "),a("code",[t._v("POST")]),t._v("、"),a("code",[t._v("PUT")]),t._v("、"),a("code",[t._v("GET")]),t._v("、 "),a("code",[t._v("DELETE")]),t._v(" 的，当结果返回的时候，根据返回的 JSON 解析成对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("SOAP 过于复杂，而且设计是面向动作的，因而往往因为架构问题导致并发量上不去。")])]),this._v(" "),s("li",[s("p",[this._v("RESTful 不仅仅是一个 API，而且是一种架构模式，主要面向资源，提供无状态服务，有利于横向扩展应对高并发。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("p",[this._v("在讨论 RESTful 模型的时候，举了一个库存的例子，但是这种方法有很大问题，那你知道为什么要这样设计吗？")])]),this._v(" "),s("li",[s("p",[this._v("基于文本的 RPC 虽然解决了二进制的问题，但是它本身也有问题，你能举出一些例子吗？")])])])}],!1,null,null,null);s.default=e.exports}}]);